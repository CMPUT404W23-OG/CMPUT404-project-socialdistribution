openapi: 3.0.3
info:
  title: Social Distribution API
  version: 1.0.0
  description: API for Social Distribution
paths:
  /api/:
    get:
      operationId: api_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenObtainPair'
          description: ''
  /api/schema:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /author/{author_id}/likes:
    get:
      operationId: author_likes_retrieve
      description: |-
        Provide the author ID as a URL parameter.

        Returns all likes for a specific author.

        Example: http://localhost:8000/authors/1/likes Returns all likes for author with id 1
      parameters:
      - in: path
        name: author_id
        schema:
          type: integer
        required: true
      tags:
      - author
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
          description: ''
  /author/{id}/:
    get:
      operationId: author_retrieve
      description: Returns information for the author.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - author
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    post:
      operationId: author_create
      description: Creates the author.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Author'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    delete:
      operationId: author_destroy
      description: Deletes the author.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - author
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /author/all/:
    get:
      operationId: author_all_retrieve
      description: |-
        Returns all authors, can be used with pagination.

        Example: This will return the second page of authors if there are 3 authors per page
        http://localhost:8000/authors/all?page=2&size=3
      tags:
      - author
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
  /author/delete/{id}:
    get:
      operationId: author_delete_retrieve
      description: Returns information for the author.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - author
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    post:
      operationId: author_delete_create
      description: Creates the author.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Author'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    delete:
      operationId: author_delete_destroy
      description: Deletes the author.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - author
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /author/signup/:
    get:
      operationId: author_signup_retrieve
      description: Returns information for the author.
      tags:
      - author
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    post:
      operationId: author_signup_create
      description: Creates the author.
      tags:
      - author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Author'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    delete:
      operationId: author_signup_destroy
      description: Deletes the author.
      tags:
      - author
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /follow/:
    post:
      operationId: follow_create
      description: |-
        Post a new follow request.
        input takes the ids of follower and following.
      tags:
      - follow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FollowPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FollowPost'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowPost'
          description: ''
  /follow/{id}/:
    get:
      operationId: follow_retrieve
      description: Retrieve a follow instance.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - follow
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
    delete:
      operationId: follow_destroy
      description: Delete a follow instance.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - follow
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /followers/{id}/:
    get:
      operationId: followers_retrieve
      description: Get a list of users that are following this user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - followers
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /following/{id}/:
    get:
      operationId: following_retrieve
      description: Get a list of users that this user is following.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - following
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /friends/{id}/:
    get:
      operationId: friends_retrieve
      description: List all true friends for a given user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - friends
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friend'
          description: ''
  /posts/{id}/:
    get:
      operationId: posts_retrieve
      description: Returns information for the author.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    post:
      operationId: posts_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    delete:
      operationId: posts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /posts/{post_id}/comments:
    get:
      operationId: posts_comments_retrieve
      description: |-
        Provide the post ID as a URL parameter.

        Returns all comments for a specific post.

        Example: http://localhost:8000/posts/1/comments Returns all comments for post 1
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    post:
      operationId: posts_comments_create
      description: |-
        Provide the post ID as URL parameters and author ID in Request body.

        Creates a new comment for a specific post.

        Example: http://localhost:8000/posts/27/comments Creates a new comment for post 27

        Request body: {"comment": "This is a comment",
                        "author": 2}
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    patch:
      operationId: posts_comments_partial_update
      description: |-
        Provide the post ID and comment ID as URL parameters and author ID in Request body.

        Updates a specific comment for a specific post.

        Example: http://localhost:8000/posts/27/comments/2 Updates comment with id 2 for post 27

        Request body: {"comment": "This is a comment"}
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedComment'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    delete:
      operationId: posts_comments_destroy
      description: |-
        Provide the post ID and comment ID as URL parameters.

        Deletes a specific comment for a specific post.

        Example: http://localhost:8000/posts/27/comments/2 Deletes comment with id 2 for post 27
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /posts/{post_id}/comments/{comment_id}:
    get:
      operationId: posts_comments_retrieve_2
      description: |-
        Provide the post ID as a URL parameter.

        Returns all comments for a specific post.

        Example: http://localhost:8000/posts/1/comments Returns all comments for post 1
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    post:
      operationId: posts_comments_create_2
      description: |-
        Provide the post ID as URL parameters and author ID in Request body.

        Creates a new comment for a specific post.

        Example: http://localhost:8000/posts/27/comments Creates a new comment for post 27

        Request body: {"comment": "This is a comment",
                        "author": 2}
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    patch:
      operationId: posts_comments_partial_update_2
      description: |-
        Provide the post ID and comment ID as URL parameters and author ID in Request body.

        Updates a specific comment for a specific post.

        Example: http://localhost:8000/posts/27/comments/2 Updates comment with id 2 for post 27

        Request body: {"comment": "This is a comment"}
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedComment'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    delete:
      operationId: posts_comments_destroy_2
      description: |-
        Provide the post ID and comment ID as URL parameters.

        Deletes a specific comment for a specific post.

        Example: http://localhost:8000/posts/27/comments/2 Deletes comment with id 2 for post 27
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /posts/{post_id}/likes:
    get:
      operationId: posts_likes_retrieve_2
      description: |-
        Provide only post ID as a URL parameter.

        Returns all likes for a specific post.

        Example: http://localhost:8000/posts/27/likes Returns all likes for post with id 27


        Provide only comment ID as a URL parameter.

        Returns all likes for a specific comment.

        Example: http://localhost:8000/posts/comments/2/likes Returns all likes for comment with id 2
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
          description: ''
    post:
      operationId: posts_likes_create_2
      description: |-
        Provide only post ID as a URL parameter and author ID of the user who wants to like the comment in the request body.

        Creates a new like for a specific post.

        Example: http://localhost:8000/posts/27/likes Creates a new like for post with id

        Request body: {"summary" : "Author 1 likes your post.",
                       "author" : "1"}

        Provide only comment ID as a URL parameter and author ID of the user who wants to like the comment in the request body.

        Creates a new like for a specific comment.

        Example: http://localhost:8000/posts/comments/2/likes Creates a new like for comment with id 2

        Request body: {"summary" : "Author 1 likes your comment.",
                        "author" : "1"}
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Like'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Like'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
          description: ''
    delete:
      operationId: posts_likes_destroy_2
      description: |-
        Provide the like ID as a URL parameter.

        Deletes a specific like.

        Example: http://localhost:8000/posts/likes/2 Deletes like with id 2
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /posts/all/:
    get:
      operationId: posts_all_retrieve
      description: |-
        Returns all posts, can be used with pagination.

        Example: This will return the second page of posts if there are 3 posts per page
        http://localhost:8000/posts/all?page=2&size=3
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /posts/all/count:
    get:
      operationId: posts_all_count_retrieve
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /posts/author/{author_id}:
    get:
      operationId: posts_author_retrieve
      description: |-
        Returns all posts for a specific author, can be used with pagination.

        Example: This will return the second page of posts belonging to author 39 if there are 3 posts per page
        http://localhost:8000/posts/author/39?page=2&size=3
      parameters:
      - in: path
        name: author_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /posts/comments/{comment_id}/likes:
    get:
      operationId: posts_comments_likes_retrieve
      description: |-
        Provide only post ID as a URL parameter.

        Returns all likes for a specific post.

        Example: http://localhost:8000/posts/27/likes Returns all likes for post with id 27


        Provide only comment ID as a URL parameter.

        Returns all likes for a specific comment.

        Example: http://localhost:8000/posts/comments/2/likes Returns all likes for comment with id 2
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
          description: ''
    post:
      operationId: posts_comments_likes_create
      description: |-
        Provide only post ID as a URL parameter and author ID of the user who wants to like the comment in the request body.

        Creates a new like for a specific post.

        Example: http://localhost:8000/posts/27/likes Creates a new like for post with id

        Request body: {"summary" : "Author 1 likes your post.",
                       "author" : "1"}

        Provide only comment ID as a URL parameter and author ID of the user who wants to like the comment in the request body.

        Creates a new like for a specific comment.

        Example: http://localhost:8000/posts/comments/2/likes Creates a new like for comment with id 2

        Request body: {"summary" : "Author 1 likes your comment.",
                        "author" : "1"}
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Like'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Like'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
          description: ''
    delete:
      operationId: posts_comments_likes_destroy
      description: |-
        Provide the like ID as a URL parameter.

        Deletes a specific like.

        Example: http://localhost:8000/posts/likes/2 Deletes like with id 2
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /posts/create/{author_id}:
    get:
      operationId: posts_create_retrieve
      description: Returns information for the author.
      parameters:
      - in: path
        name: author_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    post:
      operationId: posts_create_create
      parameters:
      - in: path
        name: author_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    delete:
      operationId: posts_create_destroy
      parameters:
      - in: path
        name: author_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /posts/likes/{like_id}:
    get:
      operationId: posts_likes_retrieve
      description: |-
        Provide only post ID as a URL parameter.

        Returns all likes for a specific post.

        Example: http://localhost:8000/posts/27/likes Returns all likes for post with id 27


        Provide only comment ID as a URL parameter.

        Returns all likes for a specific comment.

        Example: http://localhost:8000/posts/comments/2/likes Returns all likes for comment with id 2
      parameters:
      - in: path
        name: like_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
          description: ''
    post:
      operationId: posts_likes_create
      description: |-
        Provide only post ID as a URL parameter and author ID of the user who wants to like the comment in the request body.

        Creates a new like for a specific post.

        Example: http://localhost:8000/posts/27/likes Creates a new like for post with id

        Request body: {"summary" : "Author 1 likes your post.",
                       "author" : "1"}

        Provide only comment ID as a URL parameter and author ID of the user who wants to like the comment in the request body.

        Creates a new like for a specific comment.

        Example: http://localhost:8000/posts/comments/2/likes Creates a new like for comment with id 2

        Request body: {"summary" : "Author 1 likes your comment.",
                        "author" : "1"}
      parameters:
      - in: path
        name: like_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Like'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Like'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
          description: ''
    delete:
      operationId: posts_likes_destroy
      description: |-
        Provide the like ID as a URL parameter.

        Deletes a specific like.

        Example: http://localhost:8000/posts/likes/2 Deletes like with id 2
      parameters:
      - in: path
        name: like_id
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /request/{id}/:
    get:
      operationId: request_retrieve
      description: Retrieve a request instance.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - request
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
          description: ''
    post:
      operationId: request_create
      description: |-
        Accept or reject a request instance. {"Approve": true} accepts the request and {"Approve": false} rejects the request.
        {"Cancel": true} cancels the request.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RequestPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RequestPost'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
          description: ''
    delete:
      operationId: request_destroy
      description: Delete a request instance.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - request
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /requests_received/{id}/:
    get:
      operationId: requests_received_retrieve
      description: Get All follow requests sent to a user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - requests_received
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
          description: ''
  /requests_sent/{id}/:
    get:
      operationId: requests_sent_retrieve
      description: Get All follow requests sent by a user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - requests_sent
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
          description: ''
  /service/authors/:
    get:
      operationId: service_authors_retrieve
      description: Get all authors from remote server
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: ' List of authors from remote server'
        '401':
          description: Unauthorized
  /service/authors/{AUTHOR_ID}/:
    get:
      operationId: remote author detail
      description: Get Author with a given id from remote server
      parameters:
      - in: path
        name: AUTHOR_ID
        schema:
          type: string
        required: true
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remoteAuthor'
          description: ''
  /service/authors/{AUTHOR_ID}/followers/:
    get:
      operationId: service_authors_followers_retrieve
      description: Get all followers from remote server for a given author
      parameters:
      - in: path
        name: AUTHOR_ID
        schema:
          type: string
        required: true
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: ' List of followers from remote server'
        '401':
          description: Unauthorized
  /service/authors/{AUTHOR_ID}/followers/{FOLLOWER_ID}:
    get:
      operationId: remote following detail
      description: |-
        Check if FOREIGN_AUTHOR_ID is a follower of AUTHOR_ID
        SUCCESS: 200 OK, {"type": "following", "items": [AUTHOR OBJECT]},
        FAILURE: 404 NOT FOUND, {"type": "following", "items": []}
      parameters:
      - in: path
        name: AUTHOR_ID
        schema:
          type: string
        required: true
      - in: path
        name: FOLLOWER_ID
        schema:
          type: string
        required: true
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remoteAuthor'
          description: ''
  /service/authors/{AUTHOR_ID}/likes/:
    get:
      operationId: service_authors_likes_retrieve
      description: Get all likes from remote server for a given author
      parameters:
      - in: path
        name: AUTHOR_ID
        schema:
          type: string
        required: true
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: ' List of likes from remote server for a given author'
        '401':
          description: Unauthorized
  /service/authors/{AUTHOR_ID}/posts/:
    get:
      operationId: service_authors_posts_retrieve
      description: Get all posts from remote server
      parameters:
      - in: path
        name: AUTHOR_ID
        schema:
          type: string
        required: true
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: ' List of posts from remote server'
        '401':
          description: Unauthorized
  /service/authors/{AUTHOR_ID}/posts/{POST_ID}:
    get:
      operationId: remote post detail
      description: Get a post with a given id from remote server
      parameters:
      - in: path
        name: AUTHOR_ID
        schema:
          type: string
        required: true
      - in: path
        name: POST_ID
        schema:
          type: string
        required: true
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remotePosts'
          description: ''
  /service/authors/{AUTHOR_ID}/posts/{POST_ID}/comments/:
    get:
      operationId: service_authors_posts_comments_retrieve
      description: Get all comments from remote server for a given post
      parameters:
      - in: path
        name: AUTHOR_ID
        schema:
          type: string
        required: true
      - in: path
        name: POST_ID
        schema:
          type: string
        required: true
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: ' List of comments from remote server for a given post'
        '401':
          description: Unauthorized
  /service/authors/{AUTHOR_ID}/posts/{POST_ID}/comments/{COMMENT_ID}/likes/:
    get:
      operationId: service_authors_posts_comments_likes_retrieve
      description: Get all likes from remote server for a given comment
      parameters:
      - in: path
        name: AUTHOR_ID
        schema:
          type: string
        required: true
      - in: path
        name: COMMENT_ID
        schema:
          type: string
        required: true
      - in: path
        name: POST_ID
        schema:
          type: string
        required: true
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: ' List of likes from remote server for a given comment'
        '401':
          description: Unauthorized
  /service/authors/{AUTHOR_ID}/posts/{POST_ID}/likes/:
    get:
      operationId: service_authors_posts_likes_retrieve
      description: Get all likes from remote server for a given post
      parameters:
      - in: path
        name: AUTHOR_ID
        schema:
          type: string
        required: true
      - in: path
        name: POST_ID
        schema:
          type: string
        required: true
      tags:
      - service
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: ' List of likes from remote server for a given post'
        '401':
          description: Unauthorized
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          maxLength: 128
        githubId:
          type: string
          maxLength: 200
        profile_image_url:
          type: string
          format: uri
          maxLength: 200
        host:
          type: string
          format: uri
          maxLength: 200
        url:
          type: string
          format: uri
          maxLength: 200
      required:
      - id
      - password
      - username
    AuthorPost:
      type: object
      description: New author serializer for get and post requests in the Post model.
        Required to avoid password being returned in the response.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        githubId:
          type: string
          maxLength: 200
        profile_image_url:
          type: string
          format: uri
          maxLength: 200
        host:
          type: string
          format: uri
          maxLength: 200
        url:
          type: string
          format: uri
          maxLength: 200
      required:
      - id
      - username
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          $ref: '#/components/schemas/AuthorPost'
        comment:
          type: string
        contentType:
          type: string
          maxLength: 200
        post:
          type: integer
      required:
      - author
      - comment
      - id
      - post
    Follow:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        follower:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        following:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
      required:
      - created
      - follower
      - following
      - id
    FollowPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        follower:
          type: integer
        following:
          type: integer
        created:
          type: string
          format: date-time
          readOnly: true
      required:
      - created
      - follower
      - following
      - id
    Friend:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        follower:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        following:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
      required:
      - created
      - follower
      - following
      - id
    Like:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        summary:
          type: string
          maxLength: 200
        author:
          $ref: '#/components/schemas/AuthorPost'
        post:
          type: integer
          nullable: true
        comment:
          type: integer
          nullable: true
      required:
      - author
      - id
      - summary
    MyTokenObtainPair:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    PatchedComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          $ref: '#/components/schemas/AuthorPost'
        comment:
          type: string
        contentType:
          type: string
          maxLength: 200
        post:
          type: integer
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author_id:
          type: integer
        author_name:
          type: string
          maxLength: 200
        title:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 200
        body:
          type: string
          nullable: true
        visibility:
          type: string
          maxLength: 200
        datePublished:
          type: string
          format: date-time
          readOnly: true
        contentType:
          type: string
          maxLength: 200
        image_file:
          type: string
          format: uri
          nullable: true
        image_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
      required:
      - author_name
      - datePublished
      - description
      - id
      - title
    Request:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        follower:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        following:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
      required:
      - created
      - follower
      - following
      - id
    RequestPost:
      type: object
      properties:
        Approve:
          type: boolean
        Cancel:
          type: boolean
      required:
      - Approve
      - Cancel
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - id
      - username
    remoteAuthor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        host:
          type: string
          format: uri
          maxLength: 200
        url:
          type: string
          format: uri
          maxLength: 200
        displayName:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        github:
          type: string
          default: ''
          title: GithubId
          maxLength: 200
        profileImage:
          type: string
          format: uri
          maxLength: 200
      required:
      - displayName
      - id
    remotePosts:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        id:
          type: integer
          readOnly: true
        source:
          type: string
          default: http://31552.yeg.rac.sh
        origin:
          type: string
          default: http://31552.yeg.rac.sh
        description:
          type: string
          maxLength: 200
        contentType:
          type: string
          maxLength: 200
        content:
          type: string
          maxLength: 200
        author:
          $ref: '#/components/schemas/remoteAuthor'
        categories:
          type: array
          items:
            type: string
            maxLength: 200
        published:
          type: string
          format: date-time
          readOnly: true
          title: DatePublished
        visibility:
          type: string
          maxLength: 200
        unlisted:
          type: boolean
      required:
      - author
      - content
      - description
      - id
      - published
      - title
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
